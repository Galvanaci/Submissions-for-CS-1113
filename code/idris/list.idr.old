module list_nat

import nat
import pair

data list_nat = nil | cons nat list_nat

lO: list_nat
lO = nil

l1: list_nat
l1 = cons O nil

l2: list_nat
l2 = (cons (S O) (cons (S (S O)) (nil)))

l3: list_nat
l3 = cons (S O) (cons (S (S O)) (cons (S (S (S O))) nil))


--the recursion is taking off the first value of the list, calling
--that a tally and then repeate with the rest of the list
length: list_nat -> nat
length nil = O
length (cons n l) = S (length l)

|||takes a pair of lists and returns the list made by appending the lists
append: pair list_nat list_nat -> list_nat
append (mkPair nil l) = l
append (mkPair (cons h t) l) = cons h (append (mkPair t l))
