module nat

import bool
import pair
 
data nat = O | S nat


||| returns truE if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

||| return false if the argument is event otherwise true
||| i.e./ return true if it's odd and false if it's even.
oddb: nat -> bool
oddb n = not (evenb n)

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

add: nat -> nat -> nat
add O m = m
add (S n) m = S (add n m)

||| given a pair of natural numbers, return its product
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (multp (mkPair n m)) m)
 
|||given a natural number return the product of its predecessor and all of its successors
factp: nat -> nat
factp O = S O
factp (S n) = multp (mkPair (S n) (factp n))

|||given a pair of natural numbers, return the difference
subp: pair nat nat -> nat
subp (mkPair O n) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

||| Given a pair of natural numbers, (a, b), return true if a < b otherwise return false
ltp: pair nat nat -> bool
ltp (mkPair O O) = false
ltp (mkPair O m) = true
ltp (mkPair (S n) O) = false
ltp (mkPair (S n) (S m)) = ltp (mkPair n m)

||| Given a pair of natural numbers, (a, b), return true if a < = b otherwise return false
lep: pair nat nat -> bool
lep (mkPair O m) = true
lep (mkPair (S n) O) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

|||given a pair of natural numbers, (x, n), return the value of x raised to the nth power
exp: pair nat nat -> nat
exp (mkPair x O) = S O
exp (mkPair x (S n)) = multp (mkPair x (exp (mkPair x n)))

||| given a pair of natural numbers, (a, b), return true if a is equal to b, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)
eqp p = false

|||given a pair of natural numbers, (a, b), return true if a is greater than or equal to  b otherwise return false
gep: pair nat nat -> bool
gep (mkPair m O) = true
gep (mkPair O (S n)) = false
gep (mkPair (S m) (S n)) = gep (mkPair m n)

|||given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair O O) = false
gtp (mkPair m O) = true
gtp (mkPair O n) = false
gtp (mkPair (S m) (S n)) = gtp (mkPair m n)

fibp: nat -> nat
fibp O = O
fibp (S O) = S O
fibp (S (S n)) = addp (mkPair (fibp (S n)) (fibp n))

addTwo: nat -> nat
addTwo = add (S (S O))

result: nat
result = addTwo (S (S (S O)))
--yields five!

